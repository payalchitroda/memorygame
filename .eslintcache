[{"D:\\memorygame\\src\\index.js":"1","D:\\memorygame\\src\\reportWebVitals.js":"2","D:\\memorygame\\src\\App.js":"3","D:\\memorygame\\src\\components\\Home.js":"4","D:\\memorygame\\src\\components\\home.js":"5","D:\\memorygame\\src\\components\\board.js":"6","D:\\memorygame\\src\\components\\Card\\card.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":391,"mtime":1609781846981,"results":"11","hashOfConfig":"9"},{"size":718,"mtime":1609751380571,"results":"12","hashOfConfig":"9"},{"size":768,"mtime":1610040003460,"results":"13","hashOfConfig":"9"},{"size":3186,"mtime":1610042114474,"results":"14","hashOfConfig":"9"},{"size":451,"mtime":1610037830917,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1flt2zt",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\memorygame\\src\\index.js",[],["32","33"],"D:\\memorygame\\src\\reportWebVitals.js",[],"D:\\memorygame\\src\\App.js",["34"],"D:\\memorygame\\src\\components\\Home.js",[],"D:\\memorygame\\src\\components\\home.js",[],"D:\\memorygame\\src\\components\\board.js",["35","36","37","38"],"import React from 'react';\r\nimport Card from './Card/card';\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cardList: [],\r\n            cardFlipped: [],\r\n            count: 0,\r\n            card1Id: \"\",\r\n            card2Id: \"\",\r\n        };\r\n\r\n    }\r\n\r\n\r\n    change = (id) => {\r\n\r\n        let cardList = [...this.state.cardList];\r\n        var k;\r\n        for (var j = 0; j < cardList.length; j++) {\r\n            if (cardList[j].id == id) {\r\n                k = j;\r\n                break;\r\n            }\r\n        }\r\n        let card = { ...cardList[k] };\r\n        this.setState({ card1Id: this.state.card2Id, card2Id: k });\r\n\r\n        var count = this.state.count;\r\n        if (this.state.count == 2) {\r\n            let card1 = { ...cardList[this.state.card1Id] };\r\n            let card2 = { ...cardList[this.state.card2Id] };\r\n            if (card1.value == card2.value) {\r\n                console.log(\"matched\");\r\n            }\r\n            else {\r\n                card1.flip = false\r\n                cardList[this.state.card1Id] = card1;\r\n                card2.flip = false\r\n                cardList[this.state.card2Id] = card2;\r\n            }\r\n            console.log(\"ccccount\" + this.state.count)\r\n            this.setState({ cardList: cardList, count: 0 });\r\n            return\r\n\r\n        }\r\n\r\n        console.log(\"count\" + this.state.count)\r\n        if (card.flip == false) {\r\n            card.flip = !card.flip;\r\n            cardList[k] = card;\r\n            count++\r\n            this.setState({ cardList: cardList });\r\n            console.log(card.id);\r\n\r\n        }\r\n        else {\r\n            card.flip = !card.flip;\r\n            cardList[k] = card;\r\n            count--\r\n            this.setState({ cardList: cardList });\r\n        }\r\n        this.setState({ count: count });\r\n\r\n    }\r\n    start = (size) => {\r\n        var k = 0;\r\n        var cardList = [];\r\n        for (var i = 0; i < size; i++) {\r\n            for (var j = 0; j < size; j++) {\r\n                var value = k % (size * (size / 2));\r\n                cardList.push({ id: k, value: value, flip: false })\r\n                k++;\r\n            }\r\n\r\n        }\r\n        cardList.sort(() => Math.random() - 0.5)\r\n        this.setState({ cardList: cardList });\r\n\r\n\r\n    }\r\n    restart = (size) => {\r\n        this.setState({\r\n            cardList: [],\r\n            cardFlipped: [],\r\n            count: 0,\r\n            card1Id: \"\",\r\n            card2Id: \"\",\r\n        });\r\n        this.start(size)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.start(this.props.size)}>start</button>\r\n                <button onClick={() => this.restart(this.props.size)}>Restart</button>\r\n\r\n                <br />\r\n                {this.state.cardList.map(cardList => (\r\n                    <Card\r\n                        id={cardList.id}\r\n                        value={cardList.value}\r\n                        flip={cardList.flip}\r\n                        change={this.change}\r\n\r\n                    />\r\n                ))}\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Board;","D:\\memorygame\\src\\components\\Card\\card.js",["39"],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":3,"column":42,"nodeType":"46","messageId":"47","endLine":3,"endColumn":46},{"ruleId":"48","severity":1,"message":"49","line":22,"column":32,"nodeType":"50","messageId":"51","endLine":22,"endColumn":34},{"ruleId":"48","severity":1,"message":"49","line":31,"column":30,"nodeType":"50","messageId":"51","endLine":31,"endColumn":32},{"ruleId":"48","severity":1,"message":"49","line":34,"column":29,"nodeType":"50","messageId":"51","endLine":34,"endColumn":31},{"ruleId":"48","severity":1,"message":"49","line":50,"column":23,"nodeType":"50","messageId":"51","endLine":50,"endColumn":25},{"ruleId":"52","severity":1,"message":"53","line":6,"column":5,"nodeType":"54","messageId":"55","endLine":8,"endColumn":6},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]