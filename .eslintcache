[{"D:\\memorygame\\src\\index.js":"1","D:\\memorygame\\src\\reportWebVitals.js":"2","D:\\memorygame\\src\\App.js":"3","D:\\memorygame\\src\\components\\Home.js":"4","D:\\memorygame\\src\\components\\home.js":"5","D:\\memorygame\\src\\components\\board.js":"6","D:\\memorygame\\src\\components\\Card\\card.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":348,"mtime":1610370739927,"results":"11","hashOfConfig":"9"},{"size":718,"mtime":1609751380571,"results":"12","hashOfConfig":"9"},{"size":887,"mtime":1610378745216,"results":"13","hashOfConfig":"9"},{"size":5120,"mtime":1610379303930,"results":"14","hashOfConfig":"9"},{"size":475,"mtime":1610379320780,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1flt2zt",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\memorygame\\src\\index.js",[],"D:\\memorygame\\src\\reportWebVitals.js",[],"D:\\memorygame\\src\\App.js",["32"],"D:\\memorygame\\src\\components\\Home.js",[],"D:\\memorygame\\src\\components\\home.js",[],"D:\\memorygame\\src\\components\\board.js",["33","34","35","36","37","38","39","40","41","42","43","44","45"],"import React from 'react';\r\nimport Card from './Card/card';\r\nimport './board.css';\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cardList: [],\r\n            count: 0,\r\n            card1Id: \"\",\r\n            card2Id: \"\",\r\n            player: true,\r\n            player1score: 0,\r\n            player2score: 0,\r\n            win: false,\r\n        };\r\n\r\n    }\r\n\r\n    change = (id) => {\r\n\r\n        let cardList = this.state.cardList;\r\n        var cardIndex;\r\n        for (var j = 0; j < cardList.length; j++) {\r\n            if (cardList[j].id == id) {\r\n                cardIndex = j;\r\n                break;\r\n            }\r\n        }\r\n        let card = cardList[cardIndex];\r\n        if (this.state.count != 2)\r\n            this.setState({ card1Id: this.state.card2Id, card2Id: cardIndex });\r\n        // console.log(this.state.card1Id + \"   ======\" + this.state.card2Id)\r\n        var count = this.state.count;\r\n        if (this.state.count == 2) {\r\n\r\n            let card1 = cardList[this.state.card1Id];\r\n            let card2 = cardList[this.state.card2Id];\r\n            //  console.log(card1.value+\"------  \"+card2.value)\r\n\r\n\r\n            if (card1.value == card2.value) {\r\n                // console.log(\"matched\");\r\n                this.state.player ? this.setState({ player1score: this.state.player1score + 1 }) : this.setState({ player2score: this.state.player2score + 1 })\r\n                card1.flip = 2\r\n                cardList[this.state.card1Id] = card1;\r\n                card2.flip = 2\r\n                cardList[this.state.card2Id] = card2;\r\n            }\r\n            else {\r\n                card1.flip = (card1.flip == 1) ? 0 : card1.flip\r\n                cardList[this.state.card1Id] = card1;\r\n                card2.flip = (card2.flip == 1) ? 0 : card2.flip\r\n                cardList[this.state.card2Id] = card2;\r\n                this.setState({ player: !this.state.player });\r\n                // console.log(this.state.player)\r\n            }\r\n            this.setState({ cardList: cardList, count: 0 });\r\n\r\n            var cardflippedcount = 0;\r\n            for (var j = 0; j < cardList.length; j++) {\r\n                if (cardList[j].flip == 2) {\r\n                    cardflippedcount++;\r\n                }\r\n            }\r\n            if (cardflippedcount == (this.props.size * this.props.size)) {\r\n                console.log(cardflippedcount)\r\n                this.setState({ win: true });\r\n            }\r\n            return\r\n\r\n        }\r\n\r\n        // console.log(\"count\" + this.state.count)\r\n        if (card.flip == 0) {\r\n            card.flip = 1;\r\n            cardList[cardIndex] = card;\r\n            count++\r\n            this.setState({ cardList: cardList });\r\n\r\n        }\r\n        else {\r\n            card.flip = 0;\r\n            cardList[cardIndex] = card;\r\n            count--\r\n            this.setState({ cardList: cardList });\r\n        }\r\n        this.setState({ count: count });\r\n\r\n\r\n\r\n        if (count == 2) {\r\n\r\n            setTimeout(() => {\r\n                this.change(id)\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n\r\n    start = (size) => {\r\n        var k = 0;\r\n        var cardList = [];\r\n        for (var i = 0; i < size * size; i++) {\r\n            var value = k % (size * (size / 2));\r\n            cardList.push({ id: k, value: value, flip: 0 })\r\n            k++;\r\n        }\r\n        cardList.sort(() => Math.random() - 0.5)\r\n        this.setState({ cardList: cardList });\r\n\r\n\r\n    }\r\n    restart = (size) => {\r\n        this.setState({\r\n            cardList: [],\r\n            count: 0,\r\n            card1Id: \"\",\r\n            card2Id: \"\",\r\n            player: true,\r\n            player1score: 0,\r\n            player2score: 0,\r\n            win: false,\r\n        });\r\n        this.start(size)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { size } = this.props\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.start(size)}>Start</button>&nbsp;&nbsp;\r\n                <button onClick={() => this.restart(size)}>Restart</button>\r\n\r\n                <br />\r\n                <div className='player'>{this.state.player ? 'Player1' : 'Player2'}</div>\r\n                <div className='player1score'>Player1 score: {this.state.player1score}</div>\r\n                <div className='winner'> {this.state.win ? ((this.state.player1score > this.state.player2score) ? \"ðŸ¥³Player1 winsðŸ¥³\" : \"ðŸ¥³Player2 winsðŸ¥³\") : \"\"}</div>\r\n                <div className='player2score'>Player2 score: {this.state.player2score}</div>\r\n                <br />\r\n                <br />\r\n                <div class={size == 4 ? 'grid1' : (size == 6 ? 'grid2' : 'grid3')}>\r\n                    {this.state.cardList.map(cardList => (\r\n                        <Card\r\n                            id={cardList.id}\r\n                            value={cardList.value}\r\n                            flip={cardList.flip}\r\n                            change={this.change}\r\n\r\n                        />\r\n                    ))}\r\n                </div>\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Board;",["46","47"],"D:\\memorygame\\src\\components\\Card\\card.js",["48","49","50"],{"ruleId":"51","severity":1,"message":"52","line":3,"column":42,"nodeType":"53","messageId":"54","endLine":3,"endColumn":46},{"ruleId":"55","severity":1,"message":"56","line":25,"column":32,"nodeType":"57","messageId":"58","endLine":25,"endColumn":34},{"ruleId":"55","severity":1,"message":"59","line":31,"column":30,"nodeType":"57","messageId":"58","endLine":31,"endColumn":32},{"ruleId":"55","severity":1,"message":"56","line":35,"column":30,"nodeType":"57","messageId":"58","endLine":35,"endColumn":32},{"ruleId":"55","severity":1,"message":"56","line":42,"column":29,"nodeType":"57","messageId":"58","endLine":42,"endColumn":31},{"ruleId":"55","severity":1,"message":"56","line":51,"column":42,"nodeType":"57","messageId":"58","endLine":51,"endColumn":44},{"ruleId":"55","severity":1,"message":"56","line":53,"column":42,"nodeType":"57","messageId":"58","endLine":53,"endColumn":44},{"ruleId":"60","severity":1,"message":"61","line":61,"column":22,"nodeType":"53","messageId":"62","endLine":61,"endColumn":23},{"ruleId":"55","severity":1,"message":"56","line":62,"column":38,"nodeType":"57","messageId":"58","endLine":62,"endColumn":40},{"ruleId":"55","severity":1,"message":"56","line":66,"column":34,"nodeType":"57","messageId":"58","endLine":66,"endColumn":36},{"ruleId":"55","severity":1,"message":"56","line":75,"column":23,"nodeType":"57","messageId":"58","endLine":75,"endColumn":25},{"ruleId":"55","severity":1,"message":"56","line":92,"column":19,"nodeType":"57","messageId":"58","endLine":92,"endColumn":21},{"ruleId":"55","severity":1,"message":"56","line":146,"column":34,"nodeType":"57","messageId":"58","endLine":146,"endColumn":36},{"ruleId":"55","severity":1,"message":"56","line":146,"column":57,"nodeType":"57","messageId":"58","endLine":146,"endColumn":59},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":6,"column":5,"nodeType":"69","messageId":"70","endLine":8,"endColumn":6},{"ruleId":"55","severity":1,"message":"56","line":14,"column":34,"nodeType":"57","messageId":"58","endLine":14,"endColumn":36},{"ruleId":"55","severity":1,"message":"56","line":14,"column":61,"nodeType":"57","messageId":"58","endLine":14,"endColumn":63},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-redeclare","'j' is already defined.","redeclared","no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]