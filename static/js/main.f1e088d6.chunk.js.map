{"version":3,"sources":["components/Card/card.js","components/board.js","components/home.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","this","id","flip","value","className","onClick","change","React","Component","Board","cardIndex","cardList","state","j","length","card","count","setState","card1Id","card2Id","setTimeout","card1","card2","player","player1score","player2score","cardflippedcount","size","console","log","win","start","k","i","push","sort","Math","random","restart","class","map","Home","print","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1e088d6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nclass Card extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { id, flip, value } = this.props\r\n        return (\r\n\r\n            <div className={flip == 0 ? 'frontcard' : (flip == 1 ? 'backcard' : 'flippedcard')} onClick={() => this.props.change(id)}>\r\n                {flip ? value : '!'}\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card/card';\r\nimport './board.css';\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cardList: [],\r\n            count: 0,\r\n            card1Id: \"\",\r\n            card2Id: \"\",\r\n            player: true,\r\n            player1score: 0,\r\n            player2score: 0,\r\n            win: false,\r\n        };\r\n\r\n    }\r\n\r\n    change = (id) => {\r\n\r\n        let cardList = this.state.cardList;\r\n        var cardIndex;\r\n        for (var j = 0; j < cardList.length; j++) {\r\n            if (cardList[j].id == id) {\r\n                cardIndex = j;\r\n                break;\r\n            }\r\n        }\r\n        let card = cardList[cardIndex];\r\n        if (this.state.count != 2)\r\n            this.setState({ card1Id: this.state.card2Id, card2Id: cardIndex });\r\n        // console.log(this.state.card1Id + \"   ======\" + this.state.card2Id)\r\n        var count = this.state.count;\r\n        if (this.state.count == 2) {\r\n\r\n            let card1 = cardList[this.state.card1Id];\r\n            let card2 = cardList[this.state.card2Id];\r\n            //  console.log(card1.value+\"------  \"+card2.value)\r\n\r\n\r\n            if (card1.value == card2.value) {\r\n                // console.log(\"matched\");\r\n                this.state.player ? this.setState({ player1score: this.state.player1score + 1 }) : this.setState({ player2score: this.state.player2score + 1 })\r\n                card1.flip = 2\r\n                cardList[this.state.card1Id] = card1;\r\n                card2.flip = 2\r\n                cardList[this.state.card2Id] = card2;\r\n            }\r\n            else {\r\n                card1.flip = (card1.flip == 1) ? 0 : card1.flip\r\n                cardList[this.state.card1Id] = card1;\r\n                card2.flip = (card2.flip == 1) ? 0 : card2.flip\r\n                cardList[this.state.card2Id] = card2;\r\n                this.setState({ player: !this.state.player });\r\n                // console.log(this.state.player)\r\n            }\r\n            this.setState({ cardList: cardList, count: 0 });\r\n\r\n            var cardflippedcount = 0;\r\n            for (var j = 0; j < cardList.length; j++) {\r\n                if (cardList[j].flip == 2) {\r\n                    cardflippedcount++;\r\n                }\r\n            }\r\n            if (cardflippedcount == (this.props.size * this.props.size)) {\r\n                console.log(cardflippedcount)\r\n                this.setState({ win: true });\r\n            }\r\n            return\r\n\r\n        }\r\n\r\n        // console.log(\"count\" + this.state.count)\r\n        if (card.flip == 0) {\r\n            card.flip = 1;\r\n            cardList[cardIndex] = card;\r\n            count++\r\n            this.setState({ cardList: cardList });\r\n\r\n        }\r\n        else {\r\n            card.flip = 0;\r\n            cardList[cardIndex] = card;\r\n            count--\r\n            this.setState({ cardList: cardList });\r\n        }\r\n        this.setState({ count: count });\r\n\r\n\r\n\r\n        if (count == 2) {\r\n\r\n            setTimeout(() => {\r\n                this.change(id)\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n\r\n    start = (size) => {\r\n        var k = 0;\r\n        var cardList = [];\r\n        for (var i = 0; i < size * size; i++) {\r\n            var value = k % (size * (size / 2));\r\n            cardList.push({ id: k, value: value, flip: 0 })\r\n            k++;\r\n        }\r\n        cardList.sort(() => Math.random() - 0.5)\r\n        this.setState({ cardList: cardList });\r\n\r\n\r\n    }\r\n    restart = (size) => {\r\n        this.setState({\r\n            cardList: [],\r\n            count: 0,\r\n            card1Id: \"\",\r\n            card2Id: \"\",\r\n            player: true,\r\n            player1score: 0,\r\n            player2score: 0,\r\n            win: false,\r\n        });\r\n        this.start(size)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { size } = this.props\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.start(size)}>Start</button>&nbsp;&nbsp;\r\n                <button onClick={() => this.restart(size)}>Restart</button>\r\n\r\n                <br />\r\n                <div className='player'>{this.state.player ? 'Player1' : 'Player2'}</div>\r\n                <div className='player1score'>Player1 score: {this.state.player1score}</div>\r\n                <div className='winner'> {this.state.win ? ((this.state.player1score > this.state.player2score) ? \"ðŸ¥³Player1 winsðŸ¥³\" : \"ðŸ¥³Player2 winsðŸ¥³\") : \"\"}</div>\r\n                <div className='player2score'>Player2 score: {this.state.player2score}</div>\r\n                <br />\r\n                <br />\r\n                <div class={size == 4 ? 'grid1' : (size == 6 ? 'grid2' : 'grid3')}>\r\n                    {this.state.cardList.map(cardList => (\r\n                        <Card\r\n                            id={cardList.id}\r\n                            value={cardList.value}\r\n                            flip={cardList.flip}\r\n                            change={this.change}\r\n\r\n                        />\r\n                    ))}\r\n                </div>\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './board';\r\nimport './home.css';\r\n\r\nclass Home extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            size: 0,\r\n        };\r\n\r\n    }\r\n    print(size) {\r\n        this.setState({ size: size });\r\n        console.log(size);\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h3>Select level</h3>\r\n                <div>\r\n                <button onClick={() => this.print(4)} >Beginner</button> &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button onClick={() => this.print(6)}>Intermediate</button>&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button onClick={() => this.print(10)}>Advanced</button>\r\n                </div>\r\n                <br/>\r\n                <Board size={this.state.size} />\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Home;","import './App.css';\nimport Home from './components/home';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">Memory Game</div>\n      <Router>\n\n        <Route path=\"/\" component={Home} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}