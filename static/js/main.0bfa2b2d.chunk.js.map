{"version":3,"sources":["components/Card/card.js","components/board.js","components/home.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","this","id","flip","value","className","ref","e","card","onClick","change","React","Component","Board","k","cardList","state","j","length","setState","card1Id","card2Id","count","card1","card2","console","log","player","player1score","player2score","cardflippedcount","size","win","start","i","push","sort","Math","random","restart","class","map","Home","print","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bfa2b2d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nclass Card extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {id, flip, value} = this.props\r\n        return (\r\n\r\n            <div className={flip?'backcard':'frontcard'} ref={(e) => this.card = e} onClick={() =>  this.props.change(id)}>\r\n            {flip?value:'!'}\r\n         </div >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card/card';\r\nimport './board.css';\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cardList: [],\r\n            count: 0,\r\n            card1Id: \"\",\r\n            card2Id: \"\",\r\n            player: true,\r\n            player1score: 0,\r\n            player2score: 0,\r\n            win: false,\r\n        };\r\n\r\n    }\r\n\r\n\r\n    change = (id) => {\r\n\r\n        let cardList = this.state.cardList;\r\n        var k;\r\n        for (var j = 0; j < cardList.length; j++) {\r\n            if (cardList[j].id == id) {\r\n                k = j;\r\n                break;\r\n            }\r\n        }\r\n        let card = cardList[k];\r\n        this.setState({ card1Id: this.state.card2Id, card2Id: k });\r\n\r\n        var count = this.state.count;\r\n        if (this.state.count == 2) {\r\n            let card1 = cardList[this.state.card1Id];\r\n            let card2 = cardList[this.state.card2Id];\r\n            if (card1.value == card2.value) {\r\n                console.log(\"matched\");\r\n                this.state.player ? this.setState({ player1score: this.state.player1score + 1 }) : this.setState({ player2score: this.state.player2score + 1 })\r\n\r\n            }\r\n            else {\r\n                card1.flip = false\r\n                cardList[this.state.card1Id] = card1;\r\n                card2.flip = false\r\n                cardList[this.state.card2Id] = card2;\r\n                this.setState({ player: !this.state.player });\r\n                console.log(this.state.player)\r\n            }\r\n            console.log(\"ccccount\" + this.state.count)\r\n            this.setState({ cardList: cardList, count: 0 });\r\n            return\r\n\r\n        }\r\n\r\n        console.log(\"count\" + this.state.count)\r\n        if (card.flip == false) {\r\n            card.flip = !card.flip;\r\n            cardList[k] = card;\r\n            count++\r\n            this.setState({ cardList: cardList });\r\n            console.log(card.id);\r\n\r\n        }\r\n        else {\r\n            card.flip = !card.flip;\r\n            cardList[k] = card;\r\n            count--\r\n            this.setState({ cardList: cardList });\r\n        }\r\n        this.setState({ count: count });\r\n\r\n\r\n        var cardflippedcount = 0;\r\n        for (var j = 0; j < cardList.length; j++) {\r\n            if (cardList[j].flip == true) {\r\n                cardflippedcount++;\r\n            }\r\n        }\r\n        if (cardflippedcount == this.props.size) this.setState({ win: true });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    start = (size) => {\r\n        var k = 0;\r\n        var cardList = [];\r\n        for (var i = 0; i < size; i++) {\r\n            for (var j = 0; j < size; j++) {\r\n                var value = k % (size * (size / 2));\r\n                cardList.push({ id: k, value: value, flip: false })\r\n                k++;\r\n            }\r\n\r\n        }\r\n        cardList.sort(() => Math.random() - 0.5)\r\n        this.setState({ cardList: cardList });\r\n\r\n\r\n    }\r\n    restart = (size) => {\r\n        this.setState({\r\n            cardList: [],\r\n            count: 0,\r\n            card1Id: \"\",\r\n            card2Id: \"\",\r\n            player: true,\r\n            player1score: 0,\r\n            player2score: 0,\r\n            win: false,\r\n        });\r\n        this.start(size)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { size } = this.props\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.start(size)}>start</button>\r\n                <button onClick={() => this.restart(size)}>Restart</button>\r\n\r\n                <br />\r\n                {this.state.player ? 'player1' : 'player2'}\r\n                <br />\r\n                player1score{this.state.player1score}\r\n                <br />\r\n                player2score{this.state.player2score}\r\n                <br />\r\n                <div class={size==4?'grid1':(size==6?'grid2':'grid3')}>\r\n                {this.state.cardList.map(cardList => (\r\n                    <Card\r\n                        id={cardList.id}\r\n                        value={cardList.value}\r\n                        flip={cardList.flip}\r\n                        change={this.change}\r\n\r\n                    />\r\n                ))}\r\n                </div>\r\n                <br />\r\n                {this.state.win ? ((this.state.player1score > this.state.player2score) ? \"player1 wins\" : \"player2 wins\") : \"\"}\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './board';\r\nclass Home extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            size: 0,\r\n        };\r\n\r\n    }\r\n    print(size) {\r\n        this.setState({ size: size });\r\n        console.log(size);\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h2>Select level</h2>\r\n                <br />\r\n                <button onClick={() => this.print(4)} >Beginner</button>\r\n                <button onClick={() => this.print(6)}>Intermediate</button>\r\n                <button onClick={() => this.print(10)}>Advanced</button>\r\n                <Board size={this.state.size} />\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Home;","import './App.css';\nimport Home from './components/home';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\"><h2>Memory Game</h2></div>\n      <Router>\n               \n                <Route path=\"/\" component={Home}/>\n                </Router>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}