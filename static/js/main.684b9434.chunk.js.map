{"version":3,"sources":["components/Card/card.js","components/board.js","components/home.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","this","id","flip","value","className","onClick","change","React","Component","Board","k","cardList","state","j","length","card","setState","card1Id","card2Id","count","card1","card2","console","log","player","player1score","player2score","cardflippedcount","size","win","start","i","push","sort","Math","random","restart","class","map","Home","print","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.684b9434.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nclass Card extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {id, flip, value} = this.props\r\n        return (\r\n\r\n            <div className={flip?'backcard':'frontcard'}  onClick={() =>  this.props.change(id)}>\r\n            {flip?value:'!'}\r\n         </div >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card/card';\r\nimport './board.css';\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cardList: [],\r\n            count: 0,\r\n            card1Id: \"\",\r\n            card2Id: \"\",\r\n            player: true,\r\n            player1score: 0,\r\n            player2score: 0,\r\n            win: false,\r\n        };\r\n\r\n    }\r\n\r\n\r\n    change = (id) => {\r\n\r\n        let cardList = this.state.cardList;\r\n        var k;\r\n        for (var j = 0; j < cardList.length; j++) {\r\n            if (cardList[j].id == id) {\r\n                k = j;\r\n                break;\r\n            }\r\n        }\r\n        let card = cardList[k];\r\n        this.setState({ card1Id: this.state.card2Id, card2Id: k });\r\n\r\n        var count = this.state.count;\r\n        if (this.state.count == 2) {\r\n            let card1 = cardList[this.state.card1Id];\r\n            let card2 = cardList[this.state.card2Id];\r\n            if (card1.value == card2.value) {\r\n                console.log(\"matched\");\r\n                this.state.player ? this.setState({ player1score: this.state.player1score + 1 }) : this.setState({ player2score: this.state.player2score + 1 })\r\n\r\n            }\r\n            else {\r\n                card1.flip = false\r\n                cardList[this.state.card1Id] = card1;\r\n                card2.flip = false\r\n                cardList[this.state.card2Id] = card2;\r\n                this.setState({ player: !this.state.player });\r\n                console.log(this.state.player)\r\n            }\r\n           // console.log(\"ccccount\" + this.state.count)\r\n            this.setState({ cardList: cardList, count: 0 });\r\n            return\r\n\r\n        }\r\n\r\n       // console.log(\"count\" + this.state.count)\r\n        if (card.flip == false) {\r\n            card.flip = !card.flip;\r\n            cardList[k] = card;\r\n            count++\r\n            this.setState({ cardList: cardList });\r\n            console.log(card.id);\r\n\r\n        }\r\n        else {\r\n            card.flip = !card.flip;\r\n            cardList[k] = card;\r\n            count--\r\n            this.setState({ cardList: cardList });\r\n        }\r\n        this.setState({ count: count });\r\n\r\n\r\n        var cardflippedcount = 0;\r\n        for (var j = 0; j < cardList.length; j++) {\r\n            if (cardList[j].flip == true) {\r\n                cardflippedcount++;\r\n            }\r\n        }\r\n        if (cardflippedcount == this.props.size*this.props.size) this.setState({ win: true });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    start = (size) => {\r\n        var k = 0;\r\n        var cardList = [];\r\n        for (var i = 0; i < size*size; i++) {\r\n                var value = k % (size * (size / 2));\r\n                cardList.push({ id: k, value: value, flip: false })\r\n                k++;\r\n        }\r\n        cardList.sort(() => Math.random() - 0.5)\r\n        this.setState({ cardList: cardList });\r\n\r\n\r\n    }\r\n    restart = (size) => {\r\n        this.setState({\r\n            cardList: [],\r\n            count: 0,\r\n            card1Id: \"\",\r\n            card2Id: \"\",\r\n            player: true,\r\n            player1score: 0,\r\n            player2score: 0,\r\n            win: false,\r\n        });\r\n        this.start(size)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { size } = this.props\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.start(size)}>start</button>\r\n                <button onClick={() => this.restart(size)}>Restart</button>\r\n\r\n                <br />\r\n                {this.state.player ? 'player1' : 'player2'}\r\n                <br />\r\n                player1score{this.state.player1score}\r\n                <br />\r\n                player2score{this.state.player2score}\r\n                <br />\r\n                <div class={size==4?'grid1':(size==6?'grid2':'grid3')}>\r\n                {this.state.cardList.map(cardList => (\r\n                    <Card\r\n                        id={cardList.id}\r\n                        value={cardList.value}\r\n                        flip={cardList.flip}\r\n                        change={this.change}\r\n\r\n                    />\r\n                ))}\r\n                </div>\r\n                <br />\r\n                {this.state.win ? ((this.state.player1score > this.state.player2score) ? \"player1 wins\" : \"player2 wins\") : \"\"}\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './board';\r\nclass Home extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            size: 0,\r\n        };\r\n\r\n    }\r\n    print(size) {\r\n        this.setState({ size: size });\r\n        console.log(size);\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h2>Select level</h2>\r\n                <br />\r\n                <button onClick={() => this.print(4)} >Beginner</button>\r\n                <button onClick={() => this.print(6)}>Intermediate</button>\r\n                <button onClick={() => this.print(10)}>Advanced</button>\r\n                <Board size={this.state.size} />\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Home;","import './App.css';\nimport Home from './components/home';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\"><h2>Memory Game</h2></div>\n      <Router>\n               \n                <Route path=\"/\" component={Home}/>\n                </Router>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}